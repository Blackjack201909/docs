import{_ as l,c as i,o as a,a4 as e}from"./chunks/framework.BAAGAbwm.js";const m=JSON.parse('{"title":"为什么要用音乐喷泉互动点播系统？","description":"","frontmatter":{},"headers":[],"relativePath":"service/为什么要用.md","filePath":"service/为什么要用.md"}'),t={name:"service/为什么要用.md"},o=e('<h1 id="为什么要用音乐喷泉互动点播系统" tabindex="-1">为什么要用音乐喷泉互动点播系统？ <a class="header-anchor" href="#为什么要用音乐喷泉互动点播系统" aria-label="Permalink to &quot;为什么要用音乐喷泉互动点播系统？&quot;">​</a></h1><h2 id="音乐喷泉运营的现实困境" tabindex="-1">音乐喷泉运营的现实困境： <a class="header-anchor" href="#音乐喷泉运营的现实困境" aria-label="Permalink to &quot;音乐喷泉运营的现实困境：&quot;">​</a></h2><ol><li>音乐喷泉从诞生以来自带公益属性。原因很无奈：因为场地开阔和技术受限的原因，无法向观众收费。</li><li>不能开源，就只好节流。为了少耗电，喷泉每次表演时间很短。昂贵的设备利用率极低。</li><li>为了减低成本，运营商一般只购买少量表演曲目，而且长期不更新。</li><li>曲目不但数量少，质量也参差不齐，甚至每次表演的节目顺序都是一样的。很容易让观众产生审美疲劳。</li><li>维修预算紧张。导致喷泉因设备出现问题不能及时处理而长期停播。</li><li>每次表演，观众只能被动观看，对节目内容没有发言权，参与度不高。客户粘度较低。</li></ol><h2 id="互动点播解决了什么问题" tabindex="-1">互动点播解决了什么问题？ <a class="header-anchor" href="#互动点播解决了什么问题" aria-label="Permalink to &quot;互动点播解决了什么问题？&quot;">​</a></h2><ol><li>获得营收。虽然最终盈利很难，但获得有限营收仍然可以维持喷泉的良性运营，有机会逐步改善节目质量，满足游客不断提高的各种服务要求。</li><li>完全不改变音乐喷泉固有的公益属性。只有点播才付费。如果只观看，仍然免费。绝大数观众仍然可以免费观看全部喷泉表演。虽然节目可能为他人所点，并不一定符合自己喜好，但与之前的被动观看并无二致。</li><li>游客用手机自助完成点播、下单等付费服务。不额外增加喷泉管理方的现场运营成本。</li><li>游客可以通过点播参与海量的各类节目，客观上满足了个性化需求。</li><li>参与度的提高意味着人气的提升，有利于园区内的生态繁荣。</li></ol><h2 id="一般喷泉表演的节目都很少-为什么突然就可以提供海量节目了" tabindex="-1">一般喷泉表演的节目都很少，为什么突然就可以提供海量节目了？ <a class="header-anchor" href="#一般喷泉表演的节目都很少-为什么突然就可以提供海量节目了" aria-label="Permalink to &quot;一般喷泉表演的节目都很少，为什么突然就可以提供海量节目了？&quot;">​</a></h2><ol><li><p><strong>以往，编写一首喷泉节目的脚本难度高、周期长、价格贵。还有难以启齿的内存问题。</strong></p><ul><li>脚本为静态数据文件。人类无法阅读，只有借助喷泉设备，或者 3D 模拟器展示出来。</li><li>脚本修改困难。重新编写反而比修改的难度小、效率高。</li><li>每个节目的脚本都尺寸巨大，如果节目数量太多，脚本数据将占据大量内存，可能导致播放卡顿。因此，一场表演的节目不能太多。</li><li>脚本文件跟播放器版本有关。低版本可升级为高版本，但高版本无法降级为低版本。</li><li>编写和调试脚本对于专业人员尚且需要长期训练，普通人士更是无法问津。</li><li>由于文件尺寸较大，远程传送时间长。再加上版本问题，即便只是添加几首新曲的操作也是非常复杂，极易出错。</li></ul></li><li><p><strong><code>互动点播系统</code> 突破了技术瓶颈，用文本描述节目脚本。</strong></p><ul><li>新脚本为普通文本。人类不但能够阅读，还可以轻松实现编辑。拷贝、剪切、粘贴都可以。</li><li>文本的尺寸非常小，几乎是静态数据的 1/100，可直接上传到云端数据库。当然也可以存储为本地文件。</li><li>在节目播放时，只有当前一首曲目的脚本会被动态转换为实时数据，对内存不构成任何压力。</li><li>新脚本跟播放器版本无关。无论高低版本都兼容。</li><li>编写和调试脚本的软件环境也大幅优化。无需占用现场的喷泉设备，借助本地电脑的 3D 模拟器即可。</li><li>无论在手机端和电脑端都可编辑调试，脚本完成后可一键提交上云。省去了以往远程传送的诸多麻烦。</li><li>编写和调试脚本不再高不可攀，非专业人士经过短暂的自学和训练也能轻松上手。</li><li>已经有计划编写和录制教程，让更多对喷泉编程感兴趣的小伙伴参与到脚本创作中来。</li></ul></li></ol>',7),r=[o];function s(n,c,_,d,h,u){return a(),i("div",null,r)}const f=l(t,[["render",s]]);export{m as __pageData,f as default};
